import UIKit
import Firebase
import Photos


class HomeController : UICollectionViewController, UICollectionViewDelegateFlowLayout, HomePostCellDelegate {
    
    
    let cellId = "cellId"
    
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        
        NotificationCenter.default.addObserver(self, selector: #selector(handleUpdateFeed), name: SharePhotoController.updateFeedNotificationName, object: nil)

//        collectionView?.backgroundColor = UIColor.rgb(red: 114, green: 255, blue: 243)
        collectionView?.backgroundColor = .white
        collectionView?.register(HomePostCell.self, forCellWithReuseIdentifier: cellId)
        let refreshControl = UIRefreshControl()
        refreshControl.addTarget(self, action: #selector(handleRefresh), for: .valueChanged)
        collectionView?.refreshControl = refreshControl
        
        setUpNavigationItems()
        
        collectionView?.backgroundColor = UIColor.rgb(red: 113, green: 255, blue: 174)
        
        navigationController?.navigationBar.barTintColor = .white
        
        
        
//        Database.fetchUserWithUID(uid: "users") { (user) in
//            self.fetchPostsWithUser(user: user)
      fetchAllPosts()
    }
    
    
    override func viewWillAppear(_ animated: Bool) {
        <#code#>
    }
    
//    func textWithLabel(MessageToDisplay:String, Width: 100, Height:100) -> UILabel {
//
//        let messageLabel: UILabel = UILabel.init(frame: CGRect(x: 0, y: 0, width: Width, height: Height))
//        messageLabel.text = MessageToDisplay
//        messageLabel.textColor = UIColor.white
//        messageLabel.numberOfLines = 0
//        messageLabel.textAlignment = NSTextAlignment.center
//
//        messageLabel.font = messageLabel.font.withSize(16)
//        messageLabel.sizeToFit()
//
//
//
//
//        return messageLabel
//    }
    
    
    
    
    
    @objc func handleUpdateFeed() {
        handleRefresh()
    }

        @objc func handleRefresh() {
        print("Handling Refresh..")
            posts.removeAll()

          fetchAllPosts()
        
    }
    
    fileprivate func fetchAllPosts() {
        fetchPosts()
        fetchFollowingUserIds()
    }
    
    
    fileprivate func fetchFollowingUserIds() {
        guard let uid = Auth.auth().currentUser?.uid else {return }
        Database.database().reference().child("following").child(uid).observeSingleEvent(of: .value, with: { (snapshot) in
        
            guard let userIdsDictionary = snapshot.value as? [String: Any] else {return}
            
            userIdsDictionary.forEach({ (key, value) in
                Database.fetchUserWithUID(uid: key, completion: { (user) in
                    self.fetchPostsWithUser(user: user)
                })
            })
            
        }) { (err) in
            print("failed to fetch following user uid:", err)
        }
    }
    
    var posts = [Post]()
    fileprivate func fetchPosts() {
        guard let uid = Auth.auth().currentUser?.uid else {return}
       
//        Code is now much cleaner and we have one line for fetching the UserUID and one for the post.
        Database.fetchUserWithUID(uid: uid) { (user) in
            self.fetchPostsWithUser(user: user)
        }
    }
    
    //iOS9
    //let refreshControl = UIRefreshControl()
    
    fileprivate func fetchPostsWithUser(user : User) {
//        fetching users in the home feed, we're fetching posts for the right user and not the current user.
        let ref =  Database.database().reference().child("posts").child(user.uid)
        ref.observeSingleEvent(of: .value, with: { (snapshot) in
            //            print(snapshot.value)
            
            self.collectionView?.refreshControl?.endRefreshing()
            
            guard let dictionaries =  snapshot.value as? [String: Any] else {return}
            
            dictionaries.forEach({ (key, value) in
                //                print("key\(key), Value:\(value)")
                
                guard let dictionary = value as? [String: Any] else {return}
                
                //                guard let user = self.user else { return}
                
                //
                //                self.posts.insert(post, at :0)
                var post = Post(user: user, dictionary: dictionary)
                post.id = key
                
                guard let uid = Auth.auth().currentUser?.uid else {return}
                
                
                //getting the likes
        Database.database().reference().child("likes").child(key).child(uid).observeSingleEvent(of: .value, with: { (snapshot) in
                    print(snapshot)
                    if let value = snapshot.value as? Int, value == 1 { //casting as a number
                        post.hasLiked = true
                    } else {
                        post.hasLiked = false
                    }
                    
                    self.posts.append(post)
                    self.posts.sort(by: { (p1, p2) -> Bool in
                        return p1.creatingDate.compare(p2.creatingDate) == .orderedDescending
                    })
                    
                    self.collectionView?.reloadData()
                    
                }, withCancel: { (err) in
                    print("failed to print",err)
                
                })
                print(post.imageUrl)
//                self.posts.insert(post, at: 0)
            })
        }) { (err) in
            print("Failed to fetch posts:", err)
        }
    }
    
    
    func setUpNavigationItems() {
        let view = UIImageView(image: #imageLiteral(resourceName: "Group 5"))
        navigationItem.titleView = view
        view.contentMode = .scaleAspectFit
        navigationItem.rightBarButtonItem = UIBarButtonItem(image: #imageLiteral(resourceName: "icons8-plus-math-45").withRenderingMode(.alwaysOriginal), style: .plain, target: self, action: #selector(handleCamera))
        
        navigationItem.leftBarButtonItem = UIBarButtonItem(image: nil, style: .plain, target: self, action: #selector(handleCamera))

    }
    
    
    @objc func handleCamera () {
        
//        let alertController = UIAlertController(title: nil , message: nil, preferredStyle: .actionSheet)
//        alertController.addAction(UIAlertAction(title: "Add a New Activity", style: .default, handler: { (_) in
//            print("New Activity")
//        }))
        
        let addFromHomeController = AddFromHomeController(collectionViewLayout: UICollectionViewLayout()) //call correctly!!!! do better.
        navigationController?.pushViewController(addFromHomeController, animated: true)
        
        
        print("adding item")
    }
    
   @objc func handleAdd() {
    
    let cameraController = CameraController()
    
        navigationController?.pushViewController(cameraController, animated: true)
        print("handle add")
    }
    
    
    
//    We're selecting how big our cells are. It's interesting but I think half of that and if we show some small image showing what we're doing etc and where it can be interesting.
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {
        
        var height : CGFloat = 40 + 8 + 8  //username userprofileimageview
        height +=  0 //imageview.frame.width
        height += 0 // buttons it was 50 before
        height += 30 // label 50 before
        return CGSize(width: view.frame.width, height: height)
    }
    
    override func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return posts.count
    }
    
    override func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
         let cell = collectionView.dequeueReusableCell(withReuseIdentifier: cellId, for: indexPath) as! HomePostCell //
        if indexPath.item < posts.count {
            cell.post = posts[indexPath.item]
            cell.delegate = self
            
            cell.backgroundColor = .white
            cell.layer.cornerRadius = 16
        }
        return cell
        
//        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: cellId, for: indexPath) as! HomePostCell
        
//        cell.post = posts[indexPath.item]
    
    }

    
    func didTapInfo(post: Post) {
        print("tapping from home controller")
        print(post.imageUrl)
        let infoController = InfoPostController(collectionViewLayout: UICollectionViewLayout())
        navigationController?.pushViewController(infoController, animated: true)
    }
    
    
    func didTapComment(post: Post) { //for comment
        print("Message coming from HomeController") //what we just did is fire something from one cell onto the controller. Dope
        print(post.caption)
        print(post.imageUrl)
        
        let commentsController = CommentsController(collectionViewLayout: UICollectionViewFlowLayout())
        commentsController.post = post // how we get our post inside the comments controller
        navigationController?.pushViewController(commentsController, animated: true)
    }
    
    
    func didlike(for cell: HomePostCell) {
        print("handling like from controller")
        guard let indexPath =  collectionView?.indexPath(for: cell) else {return} //to figure out which post we're tapping
        var post = self.posts[indexPath.item]
        
//        let values = ["caption": post.caption , as [String: Any]]
        
        guard let postId = post.id else {return}
        
        guard let uid = Auth.auth().currentUser?.uid else {return}
        
        print(post.caption )
        
        let values = [uid: post.hasLiked == true ? 0 : 1]
        
        Database.database().reference().child("likes").child(postId).updateChildValues(values) { (err, ref) in
            if let err = err {
                print("like failed", err)
                return
            }
            print("successfully inserted comment")
            post.hasLiked = !post.hasLiked  //opposite of liking things
            self.posts[indexPath.item] = post //fixing the bug, reach the post and new post object we're modyfing
            
            self.collectionView?.reloadItems(at: [indexPath])
        }
    }
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, minimumLineSpacingForSectionAt section: Int) -> CGFloat {
        return 30
    }
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, minimumInteritemSpacingForSectionAt section: Int) -> CGFloat {
        return 1
    }
    
}
